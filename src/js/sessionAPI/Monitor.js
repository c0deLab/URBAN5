/* global SETTINGS */

/** Class to monitor the actions of the user */
class Monitor {
  constructor() {
    this.constraints = [];
    this.conflicts = [];
    this.incompatibilities = [];
    this.messages = [];
  }

  getMessages = () => this.messages;

  onAction = actionEvent => {
    const { action, metadata } = actionEvent;
  };

  /**
    * Conflict “An inconsistency discerned by the machine relating criteria specified by the designer
    * to forms generated by the designer.”
    * Examples: max height, number of objects, light, blocking entrances, check access
    */
  checkConflicts = actionEvent => {
    // TODO
  };

  /**
    * Incompatibility: “incongruity between a designer’s action and a predefined requisite embedded in the machine.”
    * Leads to a bell ringing and displaying the message on the top of the screen
    * Examples: underground, floating, clash
    */
  checkIncompatibilities = actionEvent => {

  };
}

Monitor.freeze = monitor => {
  const jsonStr = JSON.stringify(monitor);
  const json = JSON.parse(jsonStr);

  return json;
};

Monitor.thaw = json => {
  const { constraints, conflicts, incompatibilities, messages } = json;

  const monitor = new Monitor();

  monitor.constraints = constraints;
  monitor.conflicts = conflicts;
  monitor.incompatibilities = incompatibilities;
  monitor.messages = messages;

  return monitor;
};

export default Monitor;
